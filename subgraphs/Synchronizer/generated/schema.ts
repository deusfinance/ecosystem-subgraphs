// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Registrar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("ticker", Value.fromString(""));
    this.set("symbol", Value.fromString(""));
    this.set("version", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("liquidated", Value.fromBoolean(false));
    this.set("quoteVolume", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("paidFees", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Registrar entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Registrar entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Registrar", id.toString(), this);
    }
  }

  static load(id: string): Registrar | null {
    return changetype<Registrar | null>(store.get("Registrar", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get ticker(): string {
    let value = this.get("ticker");
    return value!.toString();
  }

  set ticker(value: string) {
    this.set("ticker", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get version(): string {
    let value = this.get("version");
    return value!.toString();
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get liquidated(): boolean {
    let value = this.get("liquidated");
    return value!.toBoolean();
  }

  set liquidated(value: boolean) {
    this.set("liquidated", Value.fromBoolean(value));
  }

  get quoteVolume(): BigDecimal {
    let value = this.get("quoteVolume");
    return value!.toBigDecimal();
  }

  set quoteVolume(value: BigDecimal) {
    this.set("quoteVolume", Value.fromBigDecimal(value));
  }

  get paidFees(): BigDecimal {
    let value = this.get("paidFees");
    return value!.toBigDecimal();
  }

  set paidFees(value: BigDecimal) {
    this.set("paidFees", Value.fromBigDecimal(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class Synchronizer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalVolumeDEI", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("registrarCount", Value.fromI32(0));
    this.set("txCount", Value.fromBigInt(BigInt.zero()));
    this.set("daoFees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("partnerFees", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Synchronizer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Synchronizer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Synchronizer", id.toString(), this);
    }
  }

  static load(id: string): Synchronizer | null {
    return changetype<Synchronizer | null>(store.get("Synchronizer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalVolumeDEI(): BigDecimal {
    let value = this.get("totalVolumeDEI");
    return value!.toBigDecimal();
  }

  set totalVolumeDEI(value: BigDecimal) {
    this.set("totalVolumeDEI", Value.fromBigDecimal(value));
  }

  get registrarCount(): i32 {
    let value = this.get("registrarCount");
    return value!.toI32();
  }

  set registrarCount(value: i32) {
    this.set("registrarCount", Value.fromI32(value));
  }

  get txCount(): BigInt {
    let value = this.get("txCount");
    return value!.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get daoFees(): BigDecimal {
    let value = this.get("daoFees");
    return value!.toBigDecimal();
  }

  set daoFees(value: BigDecimal) {
    this.set("daoFees", Value.fromBigDecimal(value));
  }

  get partnerFees(): BigDecimal {
    let value = this.get("partnerFees");
    return value!.toBigDecimal();
  }

  set partnerFees(value: BigDecimal) {
    this.set("partnerFees", Value.fromBigDecimal(value));
  }
}

export class Partner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("stockFee", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("cryptoFee", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("forexFee", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("cumulativeFees", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("claimableFees", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Partner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Partner entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Partner", id.toString(), this);
    }
  }

  static load(id: string): Partner | null {
    return changetype<Partner | null>(store.get("Partner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get stockFee(): BigDecimal {
    let value = this.get("stockFee");
    return value!.toBigDecimal();
  }

  set stockFee(value: BigDecimal) {
    this.set("stockFee", Value.fromBigDecimal(value));
  }

  get cryptoFee(): BigDecimal {
    let value = this.get("cryptoFee");
    return value!.toBigDecimal();
  }

  set cryptoFee(value: BigDecimal) {
    this.set("cryptoFee", Value.fromBigDecimal(value));
  }

  get forexFee(): BigDecimal {
    let value = this.get("forexFee");
    return value!.toBigDecimal();
  }

  set forexFee(value: BigDecimal) {
    this.set("forexFee", Value.fromBigDecimal(value));
  }

  get cumulativeFees(): BigDecimal {
    let value = this.get("cumulativeFees");
    return value!.toBigDecimal();
  }

  set cumulativeFees(value: BigDecimal) {
    this.set("cumulativeFees", Value.fromBigDecimal(value));
  }

  get claimableFees(): BigDecimal {
    let value = this.get("claimableFees");
    return value!.toBigDecimal();
  }

  set claimableFees(value: BigDecimal) {
    this.set("claimableFees", Value.fromBigDecimal(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value!.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("block", Value.fromBigInt(BigInt.zero()));
    this.set("method", Value.fromString(""));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("registrar", Value.fromString(""));
    this.set("price", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountIn", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("amountOut", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("partner", Value.fromString(""));
    this.set("daoFee", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("partnerFee", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get method(): string {
    let value = this.get("method");
    return value!.toString();
  }

  set method(value: string) {
    this.set("method", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get registrar(): string {
    let value = this.get("registrar");
    return value!.toString();
  }

  set registrar(value: string) {
    this.set("registrar", Value.fromString(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value!.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get amountIn(): BigDecimal {
    let value = this.get("amountIn");
    return value!.toBigDecimal();
  }

  set amountIn(value: BigDecimal) {
    this.set("amountIn", Value.fromBigDecimal(value));
  }

  get amountOut(): BigDecimal {
    let value = this.get("amountOut");
    return value!.toBigDecimal();
  }

  set amountOut(value: BigDecimal) {
    this.set("amountOut", Value.fromBigDecimal(value));
  }

  get partner(): string {
    let value = this.get("partner");
    return value!.toString();
  }

  set partner(value: string) {
    this.set("partner", Value.fromString(value));
  }

  get daoFee(): BigDecimal {
    let value = this.get("daoFee");
    return value!.toBigDecimal();
  }

  set daoFee(value: BigDecimal) {
    this.set("daoFee", Value.fromBigDecimal(value));
  }

  get partnerFee(): BigDecimal {
    let value = this.get("partnerFee");
    return value!.toBigDecimal();
  }

  set partnerFee(value: BigDecimal) {
    this.set("partnerFee", Value.fromBigDecimal(value));
  }
}

export class UserBalanceSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("user", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("registrar", Value.fromString(""));
    this.set("amount", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserBalanceSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save UserBalanceSnapshot entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("UserBalanceSnapshot", id.toString(), this);
    }
  }

  static load(id: string): UserBalanceSnapshot | null {
    return changetype<UserBalanceSnapshot | null>(
      store.get("UserBalanceSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get registrar(): string {
    let value = this.get("registrar");
    return value!.toString();
  }

  set registrar(value: string) {
    this.set("registrar", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}
