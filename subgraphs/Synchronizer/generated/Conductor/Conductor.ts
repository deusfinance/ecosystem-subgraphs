// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Conducted extends ethereum.Event {
  get params(): Conducted__Params {
    return new Conducted__Params(this);
  }
}

export class Conducted__Params {
  _event: Conducted;

  constructor(event: Conducted) {
    this._event = event;
  }

  get _id(): string {
    return this._event.parameters[0].value.toString();
  }

  get short(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get long(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Liquidated extends ethereum.Event {
  get params(): Liquidated__Params {
    return new Liquidated__Params(this);
  }
}

export class Liquidated__Params {
  _event: Liquidated;

  constructor(event: Liquidated) {
    this._event = event;
  }

  get liquidatedRegistrar(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRegistrar(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Conductor__conductResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Conductor extends ethereum.SmartContract {
  static bind(address: Address): Conductor {
    return new Conductor("Conductor", address);
  }

  conduct(
    _id: string,
    shortName: string,
    shortSymbol: string,
    longName: string,
    longSymbol: string,
    version: string,
    registrarType: BigInt
  ): Conductor__conductResult {
    let result = super.call(
      "conduct",
      "conduct(string,string,string,string,string,string,uint256):(address,address)",
      [
        ethereum.Value.fromString(_id),
        ethereum.Value.fromString(shortName),
        ethereum.Value.fromString(shortSymbol),
        ethereum.Value.fromString(longName),
        ethereum.Value.fromString(longSymbol),
        ethereum.Value.fromString(version),
        ethereum.Value.fromUnsignedBigInt(registrarType)
      ]
    );

    return new Conductor__conductResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_conduct(
    _id: string,
    shortName: string,
    shortSymbol: string,
    longName: string,
    longSymbol: string,
    version: string,
    registrarType: BigInt
  ): ethereum.CallResult<Conductor__conductResult> {
    let result = super.tryCall(
      "conduct",
      "conduct(string,string,string,string,string,string,uint256):(address,address)",
      [
        ethereum.Value.fromString(_id),
        ethereum.Value.fromString(shortName),
        ethereum.Value.fromString(shortSymbol),
        ethereum.Value.fromString(longName),
        ethereum.Value.fromString(longSymbol),
        ethereum.Value.fromString(version),
        ethereum.Value.fromUnsignedBigInt(registrarType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Conductor__conductResult(value[0].toAddress(), value[1].toAddress())
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roleChecker(): Address {
    let result = super.call("roleChecker", "roleChecker():(address)", []);

    return result[0].toAddress();
  }

  try_roleChecker(): ethereum.CallResult<Address> {
    let result = super.tryCall("roleChecker", "roleChecker():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get roleChecker_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConductCall extends ethereum.Call {
  get inputs(): ConductCall__Inputs {
    return new ConductCall__Inputs(this);
  }

  get outputs(): ConductCall__Outputs {
    return new ConductCall__Outputs(this);
  }
}

export class ConductCall__Inputs {
  _call: ConductCall;

  constructor(call: ConductCall) {
    this._call = call;
  }

  get _id(): string {
    return this._call.inputValues[0].value.toString();
  }

  get shortName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get shortSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get longName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get longSymbol(): string {
    return this._call.inputValues[4].value.toString();
  }

  get version(): string {
    return this._call.inputValues[5].value.toString();
  }

  get registrarType(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConductCall__Outputs {
  _call: ConductCall;

  constructor(call: ConductCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get registrar(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get liquidatedName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get liquidatedSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get version(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetRoleCheckerCall extends ethereum.Call {
  get inputs(): SetRoleCheckerCall__Inputs {
    return new SetRoleCheckerCall__Inputs(this);
  }

  get outputs(): SetRoleCheckerCall__Outputs {
    return new SetRoleCheckerCall__Outputs(this);
  }
}

export class SetRoleCheckerCall__Inputs {
  _call: SetRoleCheckerCall;

  constructor(call: SetRoleCheckerCall) {
    this._call = call;
  }

  get roleChecker_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRoleCheckerCall__Outputs {
  _call: SetRoleCheckerCall;

  constructor(call: SetRoleCheckerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
