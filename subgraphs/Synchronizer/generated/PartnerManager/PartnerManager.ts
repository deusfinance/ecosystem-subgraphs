// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PartnerAdded extends ethereum.Event {
  get params(): PartnerAdded__Params {
    return new PartnerAdded__Params(this);
  }
}

export class PartnerAdded__Params {
  _event: PartnerAdded;

  constructor(event: PartnerAdded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get partnerFee(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class PartnerManager extends ethereum.SmartContract {
  static bind(address: Address): PartnerManager {
    return new PartnerManager("PartnerManager", address);
  }

  isPartner(param0: Address): boolean {
    let result = super.call("isPartner", "isPartner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isPartner(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPartner", "isPartner(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  partnerFee(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "partnerFee",
      "partnerFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_partnerFee(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "partnerFee",
      "partnerFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platform(): Address {
    let result = super.call("platform", "platform():(address)", []);

    return result[0].toAddress();
  }

  try_platform(): ethereum.CallResult<Address> {
    let result = super.tryCall("platform", "platform():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(param0: BigInt): BigInt {
    let result = super.call("platformFee", "platformFee(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_platformFee(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFee",
      "platformFee(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  scale(): BigInt {
    let result = super.call("scale", "scale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_scale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("scale", "scale():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get platform_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get platformFee_(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPartnerCall extends ethereum.Call {
  get inputs(): AddPartnerCall__Inputs {
    return new AddPartnerCall__Inputs(this);
  }

  get outputs(): AddPartnerCall__Outputs {
    return new AddPartnerCall__Outputs(this);
  }
}

export class AddPartnerCall__Inputs {
  _call: AddPartnerCall;

  constructor(call: AddPartnerCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stockFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get cryptoFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get forexFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddPartnerCall__Outputs {
  _call: AddPartnerCall;

  constructor(call: AddPartnerCall) {
    this._call = call;
  }
}
