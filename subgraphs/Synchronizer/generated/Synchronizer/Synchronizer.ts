// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get partnerId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get registrar(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Sell extends ethereum.Event {
  get params(): Sell__Params {
    return new Sell__Params(this);
  }
}

export class Sell__Params {
  _event: Sell;

  constructor(event: Sell) {
    this._event = event;
  }

  get partnerId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get registrar(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class SetAppId extends ethereum.Event {
  get params(): SetAppId__Params {
    return new SetAppId__Params(this);
  }
}

export class SetAppId__Params {
  _event: SetAppId;

  constructor(event: SetAppId) {
    this._event = event;
  }

  get oldId(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get newId(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class SetMinimumRequiredSignatures extends ethereum.Event {
  get params(): SetMinimumRequiredSignatures__Params {
    return new SetMinimumRequiredSignatures__Params(this);
  }
}

export class SetMinimumRequiredSignatures__Params {
  _event: SetMinimumRequiredSignatures;

  constructor(event: SetMinimumRequiredSignatures) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetMuonContract extends ethereum.Event {
  get params(): SetMuonContract__Params {
    return new SetMuonContract__Params(this);
  }
}

export class SetMuonContract__Params {
  _event: SetMuonContract;

  constructor(event: SetMuonContract) {
    this._event = event;
  }

  get oldContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetVirtualReserve extends ethereum.Event {
  get params(): SetVirtualReserve__Params {
    return new SetVirtualReserve__Params(this);
  }
}

export class SetVirtualReserve__Params {
  _event: SetVirtualReserve;

  constructor(event: SetVirtualReserve) {
    this._event = event;
  }

  get oldReserve(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newReserve(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ToggleUseVirtualReserve extends ethereum.Event {
  get params(): ToggleUseVirtualReserve__Params {
    return new ToggleUseVirtualReserve__Params(this);
  }
}

export class ToggleUseVirtualReserve__Params {
  _event: ToggleUseVirtualReserve;

  constructor(event: ToggleUseVirtualReserve) {
    this._event = event;
  }

  get useVirtualReserve(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class WithdrawFee extends ethereum.Event {
  get params(): WithdrawFee__Params {
    return new WithdrawFee__Params(this);
  }
}

export class WithdrawFee__Params {
  _event: WithdrawFee;

  constructor(event: WithdrawFee) {
    this._event = event;
  }

  get platform(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get partnerFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get platformFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get registrarType(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Synchronizer__buyForInputSigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class Synchronizer__sellForInputSigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class Synchronizer extends ethereum.SmartContract {
  static bind(address: Address): Synchronizer {
    return new Synchronizer("Synchronizer", address);
  }

  appId(): i32 {
    let result = super.call("appId", "appId():(uint8)", []);

    return result[0].toI32();
  }

  try_appId(): ethereum.CallResult<i32> {
    let result = super.tryCall("appId", "appId():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  buyFor(
    partnerId: Address,
    receipient: Address,
    registrar: Address,
    amountIn: BigInt,
    price: BigInt,
    expireBlock: BigInt,
    _reqId: Bytes,
    sigs: Array<Synchronizer__buyForInputSigsStruct>
  ): BigInt {
    let result = super.call(
      "buyFor",
      "buyFor(address,address,address,uint256,uint256,uint256,bytes,(uint256,address,address)[]):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(receipient),
        ethereum.Value.fromAddress(registrar),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(expireBlock),
        ethereum.Value.fromBytes(_reqId),
        ethereum.Value.fromTupleArray(sigs)
      ]
    );

    return result[0].toBigInt();
  }

  try_buyFor(
    partnerId: Address,
    receipient: Address,
    registrar: Address,
    amountIn: BigInt,
    price: BigInt,
    expireBlock: BigInt,
    _reqId: Bytes,
    sigs: Array<Synchronizer__buyForInputSigsStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyFor",
      "buyFor(address,address,address,uint256,uint256,uint256,bytes,(uint256,address,address)[]):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(receipient),
        ethereum.Value.fromAddress(registrar),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(expireBlock),
        ethereum.Value.fromBytes(_reqId),
        ethereum.Value.fromTupleArray(sigs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collatDollarBalance(collat_usd_price: BigInt): BigInt {
    let result = super.call(
      "collatDollarBalance",
      "collatDollarBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(collat_usd_price)]
    );

    return result[0].toBigInt();
  }

  try_collatDollarBalance(
    collat_usd_price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collatDollarBalance",
      "collatDollarBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(collat_usd_price)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deiContract(): Address {
    let result = super.call("deiContract", "deiContract():(address)", []);

    return result[0].toAddress();
  }

  try_deiContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("deiContract", "deiContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeCollector(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "feeCollector",
      "feeCollector(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_feeCollector(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeCollector",
      "feeCollector(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountIn(
    partnerId: Address,
    registrar: Address,
    amountOut: BigInt,
    price: BigInt,
    action: BigInt
  ): BigInt {
    let result = super.call(
      "getAmountIn",
      "getAmountIn(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(registrar),
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(action)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountIn(
    partnerId: Address,
    registrar: Address,
    amountOut: BigInt,
    price: BigInt,
    action: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountIn",
      "getAmountIn(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(registrar),
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(action)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountOut(
    partnerId: Address,
    registrar: Address,
    amountIn: BigInt,
    price: BigInt,
    action: BigInt
  ): BigInt {
    let result = super.call(
      "getAmountOut",
      "getAmountOut(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(registrar),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(action)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountOut(
    partnerId: Address,
    registrar: Address,
    amountIn: BigInt,
    price: BigInt,
    action: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountOut",
      "getAmountOut(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(registrar),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(action)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalFee(partnerId: Address, registrar: Address): BigInt {
    let result = super.call(
      "getTotalFee",
      "getTotalFee(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(registrar)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalFee(
    partnerId: Address,
    registrar: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalFee",
      "getTotalFee(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(registrar)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumRequiredSignatures(): BigInt {
    let result = super.call(
      "minimumRequiredSignatures",
      "minimumRequiredSignatures():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumRequiredSignatures(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumRequiredSignatures",
      "minimumRequiredSignatures():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  muonContract(): Address {
    let result = super.call("muonContract", "muonContract():(address)", []);

    return result[0].toAddress();
  }

  try_muonContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("muonContract", "muonContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  partnerManager(): Address {
    let result = super.call("partnerManager", "partnerManager():(address)", []);

    return result[0].toAddress();
  }

  try_partnerManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "partnerManager",
      "partnerManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  scale(): BigInt {
    let result = super.call("scale", "scale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_scale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("scale", "scale():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellFor(
    partnerId: Address,
    receipient: Address,
    registrar: Address,
    amountIn: BigInt,
    price: BigInt,
    expireBlock: BigInt,
    _reqId: Bytes,
    sigs: Array<Synchronizer__sellForInputSigsStruct>
  ): BigInt {
    let result = super.call(
      "sellFor",
      "sellFor(address,address,address,uint256,uint256,uint256,bytes,(uint256,address,address)[]):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(receipient),
        ethereum.Value.fromAddress(registrar),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(expireBlock),
        ethereum.Value.fromBytes(_reqId),
        ethereum.Value.fromTupleArray(sigs)
      ]
    );

    return result[0].toBigInt();
  }

  try_sellFor(
    partnerId: Address,
    receipient: Address,
    registrar: Address,
    amountIn: BigInt,
    price: BigInt,
    expireBlock: BigInt,
    _reqId: Bytes,
    sigs: Array<Synchronizer__sellForInputSigsStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellFor",
      "sellFor(address,address,address,uint256,uint256,uint256,bytes,(uint256,address,address)[]):(uint256)",
      [
        ethereum.Value.fromAddress(partnerId),
        ethereum.Value.fromAddress(receipient),
        ethereum.Value.fromAddress(registrar),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(expireBlock),
        ethereum.Value.fromBytes(_reqId),
        ethereum.Value.fromTupleArray(sigs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  useVirtualReserve(): boolean {
    let result = super.call(
      "useVirtualReserve",
      "useVirtualReserve():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_useVirtualReserve(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "useVirtualReserve",
      "useVirtualReserve():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  virtualReserve(): BigInt {
    let result = super.call("virtualReserve", "virtualReserve():(uint256)", []);

    return result[0].toBigInt();
  }

  try_virtualReserve(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "virtualReserve",
      "virtualReserve():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get deiContract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get muonContract_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get partnerManager_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get minimumRequiredSignatures_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get virtualReserve_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get appId_(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyForCall extends ethereum.Call {
  get inputs(): BuyForCall__Inputs {
    return new BuyForCall__Inputs(this);
  }

  get outputs(): BuyForCall__Outputs {
    return new BuyForCall__Outputs(this);
  }
}

export class BuyForCall__Inputs {
  _call: BuyForCall;

  constructor(call: BuyForCall) {
    this._call = call;
  }

  get partnerId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get registrar(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get expireBlock(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _reqId(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get sigs(): Array<BuyForCallSigsStruct> {
    return this._call.inputValues[7].value.toTupleArray<BuyForCallSigsStruct>();
  }
}

export class BuyForCall__Outputs {
  _call: BuyForCall;

  constructor(call: BuyForCall) {
    this._call = call;
  }

  get registrarAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyForCallSigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SellForCall extends ethereum.Call {
  get inputs(): SellForCall__Inputs {
    return new SellForCall__Inputs(this);
  }

  get outputs(): SellForCall__Outputs {
    return new SellForCall__Outputs(this);
  }
}

export class SellForCall__Inputs {
  _call: SellForCall;

  constructor(call: SellForCall) {
    this._call = call;
  }

  get partnerId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get registrar(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get expireBlock(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _reqId(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }

  get sigs(): Array<SellForCallSigsStruct> {
    return this._call.inputValues[7].value.toTupleArray<
      SellForCallSigsStruct
    >();
  }
}

export class SellForCall__Outputs {
  _call: SellForCall;

  constructor(call: SellForCall) {
    this._call = call;
  }

  get deiAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellForCallSigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class SetAppIdCall extends ethereum.Call {
  get inputs(): SetAppIdCall__Inputs {
    return new SetAppIdCall__Inputs(this);
  }

  get outputs(): SetAppIdCall__Outputs {
    return new SetAppIdCall__Outputs(this);
  }
}

export class SetAppIdCall__Inputs {
  _call: SetAppIdCall;

  constructor(call: SetAppIdCall) {
    this._call = call;
  }

  get appId_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetAppIdCall__Outputs {
  _call: SetAppIdCall;

  constructor(call: SetAppIdCall) {
    this._call = call;
  }
}

export class SetMinimumRequiredSignaturesCall extends ethereum.Call {
  get inputs(): SetMinimumRequiredSignaturesCall__Inputs {
    return new SetMinimumRequiredSignaturesCall__Inputs(this);
  }

  get outputs(): SetMinimumRequiredSignaturesCall__Outputs {
    return new SetMinimumRequiredSignaturesCall__Outputs(this);
  }
}

export class SetMinimumRequiredSignaturesCall__Inputs {
  _call: SetMinimumRequiredSignaturesCall;

  constructor(call: SetMinimumRequiredSignaturesCall) {
    this._call = call;
  }

  get minimumRequiredSignatures_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinimumRequiredSignaturesCall__Outputs {
  _call: SetMinimumRequiredSignaturesCall;

  constructor(call: SetMinimumRequiredSignaturesCall) {
    this._call = call;
  }
}

export class SetMuonContractCall extends ethereum.Call {
  get inputs(): SetMuonContractCall__Inputs {
    return new SetMuonContractCall__Inputs(this);
  }

  get outputs(): SetMuonContractCall__Outputs {
    return new SetMuonContractCall__Outputs(this);
  }
}

export class SetMuonContractCall__Inputs {
  _call: SetMuonContractCall;

  constructor(call: SetMuonContractCall) {
    this._call = call;
  }

  get muonContract_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMuonContractCall__Outputs {
  _call: SetMuonContractCall;

  constructor(call: SetMuonContractCall) {
    this._call = call;
  }
}

export class SetVirtualReserveCall extends ethereum.Call {
  get inputs(): SetVirtualReserveCall__Inputs {
    return new SetVirtualReserveCall__Inputs(this);
  }

  get outputs(): SetVirtualReserveCall__Outputs {
    return new SetVirtualReserveCall__Outputs(this);
  }
}

export class SetVirtualReserveCall__Inputs {
  _call: SetVirtualReserveCall;

  constructor(call: SetVirtualReserveCall) {
    this._call = call;
  }

  get virtualReserve_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVirtualReserveCall__Outputs {
  _call: SetVirtualReserveCall;

  constructor(call: SetVirtualReserveCall) {
    this._call = call;
  }
}

export class ToggleUseVirtualReserveCall extends ethereum.Call {
  get inputs(): ToggleUseVirtualReserveCall__Inputs {
    return new ToggleUseVirtualReserveCall__Inputs(this);
  }

  get outputs(): ToggleUseVirtualReserveCall__Outputs {
    return new ToggleUseVirtualReserveCall__Outputs(this);
  }
}

export class ToggleUseVirtualReserveCall__Inputs {
  _call: ToggleUseVirtualReserveCall;

  constructor(call: ToggleUseVirtualReserveCall) {
    this._call = call;
  }
}

export class ToggleUseVirtualReserveCall__Outputs {
  _call: ToggleUseVirtualReserveCall;

  constructor(call: ToggleUseVirtualReserveCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFeeCall extends ethereum.Call {
  get inputs(): WithdrawFeeCall__Inputs {
    return new WithdrawFeeCall__Inputs(this);
  }

  get outputs(): WithdrawFeeCall__Outputs {
    return new WithdrawFeeCall__Outputs(this);
  }
}

export class WithdrawFeeCall__Inputs {
  _call: WithdrawFeeCall;

  constructor(call: WithdrawFeeCall) {
    this._call = call;
  }

  get receipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get registrarType(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFeeCall__Outputs {
  _call: WithdrawFeeCall;

  constructor(call: WithdrawFeeCall) {
    this._call = call;
  }
}
